`timescale 1ns/1ps
`define clock_period 20

module tb_8to16();
	reg clk;
	reg rst_n;
	reg [7:0] data_in;
	reg de_i;
	reg vs_i;
	
	//=====================<时钟信号>=============================
	initial begin
		clk = 1;
		forever
			#(`clock_period/2)	clk = ~clk;
	end

	//=====================<复位信号>=============================
	initial begin
		rst_n = 0;
		de_i = 0;
		vs_i = 0;
		data_in = 8'b0;
		#(`clock_period*20+1);
		rst_n = 1;
		#(`clock_period*20+1);
		de_i = 1;
		#(`clock_period*20+1);
		vs_i = 1;
	end


	
	
	//=====================<激励信号>=============================
	always @(posedge clk)
	begin 
		if(!rst_n)
			data_in <= 8'b0;
		else 
			data_in <= data_in + 8'b1;
	end
	
	cmos_8_16bit c8to16(
	.pclk(clk),
	.rst_n(rst_n),
	.pdata_i(data_in),
	.de_i(de_i),
	.vs_i(vs_i),
	);
endmodule